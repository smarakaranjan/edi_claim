# Generated by Django 5.2.6 on 2025-09-19 11:10

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EDIClaim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('claim_number', models.CharField(help_text='Unique identifier for this claim (e.g., C12345).', max_length=50, unique=True)),
                ('patient_id', models.CharField(help_text='Patient identifier used by payer (e.g., insurance member ID).', max_length=50)),
                ('patient_first_name', models.CharField(help_text='Patient first name used by payer.', max_length=50)),
                ('patient_middle_name', models.CharField(help_text='Patient middle name used by payer.', max_length=50)),
                ('patient_last_name', models.CharField(help_text='Patient middle name used by payer.', max_length=50)),
                ('date_of_service', models.DateField(help_text='Date the service was provided to the patient.')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total charge amount for the entire claim.', max_digits=10)),
                ('claim_type', models.CharField(choices=[('professional', 'Professional'), ('institutional', 'Institutional')], help_text='Indicates the type of claim (professional vs institutional).', max_length=50)),
                ('transaction_id', models.CharField(blank=True, help_text='Unique transaction ID returned after successfully submitting the claim.', null=True)),
                ('encounter_id', models.CharField(blank=True, help_text='Encounter Id first encounter with the rendering provider.', null=True)),
            ],
            options={
                'verbose_name': 'EDI Claim',
                'verbose_name_plural': 'EDI Claims',
                'db_table': 'superbill_edi_claim',
            },
        ),
        migrations.CreateModel(
            name='EDIDataKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(help_text='Unique abstract data key, e.g., SUBSCRIBER_LAST_NAME', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Human-readable description of what this data key represents.')),
                ('extractor', models.CharField(blank=True, help_text='Optional: path or instruction to extract value from claim object (e.g., subscriber.last_name, service_lines.0.date).', max_length=500, null=True)),
            ],
            options={
                'verbose_name': 'EDI Data Key',
                'verbose_name_plural': 'EDI Data Keys',
                'db_table': 'superbill_edi_data_key',
            },
        ),
        migrations.CreateModel(
            name='EDIElement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(help_text='Element order within the segment (e.g., 1 for NM101, 2 for NM102).')),
                ('name', models.CharField(help_text="Human-readable element name (e.g., 'Last Name', 'Entity Identifier Code').", max_length=200)),
                ('data_type', models.CharField(help_text="X12 element data type (e.g., 'AN' = Alphanumeric, 'DT' = Date, 'N2' = Numeric).", max_length=50)),
                ('length', models.PositiveIntegerField(default=50, help_text='Maximum length allowed for this element.')),
            ],
            options={
                'verbose_name': 'EDI Element',
                'verbose_name_plural': 'EDI Elements',
                'db_table': 'superbill_edi_element',
            },
        ),
        migrations.CreateModel(
            name='EDIPayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Payer name (e.g., UnitedHealthcare, Medicare).', max_length=200)),
                ('edi_version', models.CharField(default='005010X222A1', help_text='EDI version used for claims (default: HIPAA 837P Professional).', max_length=50)),
                ('base_url', models.CharField(blank=True, help_text='Base API URL or SFTP host for this payer.', max_length=500, null=True)),
                ('credentials', models.JSONField(blank=True, help_text='Authentication credentials (encrypted outside DB).', null=True)),
                ('active', models.BooleanField(default=True, help_text='If disabled, this payer is excluded from claim submission.')),
            ],
            options={
                'verbose_name': 'EDI Payer',
                'verbose_name_plural': 'EDI Payers',
                'db_table': 'superbill_edi_payer',
            },
        ),
        migrations.CreateModel(
            name='EDIProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('npi', models.CharField(help_text='National Provider Identifier (10-digit unique ID assigned to the provider).', max_length=10, unique=True)),
                ('name', models.CharField(help_text='Full name of the provider or organization.', max_length=255)),
                ('taxonomy_code', models.CharField(blank=True, help_text="Optional: Provider's specialty code (taxonomy code).", max_length=10, null=True)),
                ('provider_code', models.CharField(blank=True, help_text='Internal system code.', max_length=50, null=True)),
                ('license_number', models.CharField(blank=True, max_length=50, null=True)),
                ('license_type', models.CharField(blank=True, max_length=50, null=True)),
                ('tax_id', models.CharField(blank=True, help_text='TIN/EIN for billing.', max_length=50, null=True)),
                ('dea_number', models.CharField(blank=True, help_text='DEA number for controlled substances.', max_length=50, null=True)),
                ('upn', models.CharField(blank=True, help_text='Universal Provider Number, if applicable.', max_length=50, null=True)),
                ('type', models.CharField(blank=True, help_text="Optional: Type of provider, e.g., 'individual' or 'organization'.", max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'EDI Provider',
                'verbose_name_plural': 'EDI Providers',
                'db_table': 'superbill_edi_provider',
            },
        ),
        migrations.CreateModel(
            name='BillingICD10Diagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ICD-10 diagnosis code.', max_length=10)),
                ('description', models.TextField(help_text='Description of the ICD-10 diagnosis.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('changed_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the ICD-10 code was soft-deleted.', null=True)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='icd10_diagnoses_changed', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='icd10_diagnoses_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ICD-10 Diagnosis',
                'verbose_name_plural': 'ICD-10 Diagnoses',
                'db_table': 'superbill_icd_10_diagnoses',
            },
        ),
        migrations.CreateModel(
            name='BillingModifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modifier_code', models.CharField(help_text='CPT/HCPCS modifier code, e.g., LT, RT, 59.', max_length=5)),
                ('name', models.CharField(help_text='Short name for the modifier.', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the modifier.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('changed_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the modifier was soft-deleted.', null=True)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiers_changed', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modifiers_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Billing Modifier',
                'verbose_name_plural': 'Billing Modifiers',
                'db_table': 'superbill_modifiers',
            },
        ),
        migrations.CreateModel(
            name='BillingNDCCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_code', models.CharField(help_text='National Drug Code identifying the medication.', max_length=255)),
                ('product_description', models.CharField(help_text='Description of the medication or product.', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('changed_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the NDC code was soft-deleted.', null=True)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ndc_codes_changed', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ndc_codes_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'NDC Code',
                'verbose_name_plural': 'NDC Codes',
                'db_table': 'superbill_ndc_code',
            },
        ),
        migrations.CreateModel(
            name='BillingPlaceOfService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='POS code, e.g., 11=Office, 21=Inpatient Hospital.', max_length=10)),
                ('name', models.CharField(help_text='Short name of the place of service.', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the place of service.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('changed_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the place of service was soft-deleted.', null=True)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pos_changed', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pos_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Place of Service',
                'verbose_name_plural': 'Places of Service',
                'db_table': 'superbill_place_of_service',
            },
        ),
        migrations.CreateModel(
            name='BillingProcedureCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpt_code', models.CharField(help_text='CPT/HCPCS procedure code.', max_length=10)),
                ('name', models.CharField(help_text='Short name of the CPT code.', max_length=255)),
                ('description', models.TextField(help_text='Detailed description of the CPT code.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('changed_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the billing code was soft-deleted.', null=True)),
                ('changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_codes_changed', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_codes_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Billing Code',
                'verbose_name_plural': 'Billing Codes',
                'db_table': 'superbill_procedure_code',
            },
        ),
        migrations.CreateModel(
            name='EDIClaimDiagnosis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('claim', models.ForeignKey(help_text='The claim this diagnosis is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='diagnoses', to='superbill.ediclaim')),
                ('diagnosis_code', models.ForeignKey(help_text='ICD diagnosis code representing the medical condition.', on_delete=django.db.models.deletion.PROTECT, to='superbill.billingicd10diagnosis')),
            ],
            options={
                'verbose_name': 'EDI Claim Diagnosis',
                'verbose_name_plural': 'EDI Claims Diagnosis',
                'db_table': 'superbill_edi_claim_diagnosis',
            },
        ),
        migrations.CreateModel(
            name='EDILoop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text="Loop identifier (e.g., '2010BA' for Subscriber Loop).", max_length=20)),
                ('name', models.CharField(help_text="Human-readable loop name (e.g., 'Subscriber', 'Billing Provider').", max_length=200)),
                ('parent', models.ForeignKey(blank=True, help_text='Parent loop if nested (e.g., 2000B → 2010BA).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subloops', to='superbill.ediloop')),
            ],
            options={
                'verbose_name': 'EDI Service Loop',
                'verbose_name_plural': 'EDI Service Loops',
                'db_table': 'superbill_edi_loop',
            },
        ),
        migrations.AddField(
            model_name='ediclaim',
            name='payer',
            field=models.ForeignKey(blank=True, help_text='Identifier for the payer (used to select the correct EDI endpoint).', null=True, on_delete=django.db.models.deletion.CASCADE, to='superbill.edipayer'),
        ),
        migrations.CreateModel(
            name='EDIPayerEndpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint_type', models.CharField(choices=[('CLAIMS', 'Claims'), ('ELIGIBILITY', 'Eligibility'), ('REMITTANCE', 'Remittance'), ('OTHER', 'Other')], help_text='Type of EDI/API endpoint.', max_length=50)),
                ('path', models.CharField(help_text="Relative path or folder (e.g., '/claims/submit' or 'inbox/').", max_length=500)),
                ('protocol', models.CharField(choices=[('API', 'API'), ('SFTP', 'SFTP')], help_text='Protocol for communication with this endpoint.', max_length=10)),
                ('query_params', models.JSONField(blank=True, help_text="Optional query parameters (e.g., {'version': 'v1', 'format': 'EDI'}).", null=True)),
                ('payer', models.ForeignKey(help_text='The payer this endpoint belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='endpoints', to='superbill.edipayer')),
            ],
            options={
                'verbose_name': 'EDI Element',
                'verbose_name_plural': 'EDI Elements',
                'db_table': 'superbill_edi_payer_endpoint',
            },
        ),
        migrations.CreateModel(
            name='EDIPayerPayload',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_type', models.CharField(choices=[('EDI837', 'EDI837'), ('FHIR', 'FHIR'), ('JSON', 'JSON')], help_text='The type of payload this profile generates: EDI837 (X12 text), FHIR (HL7 JSON/XML), or custom JSON API format.', max_length=20)),
                ('payload_template', models.JSONField(help_text='A JSON structure or template that defines the payload shape. Use placeholders like {{claim.total_amount}}, {{patient.dob}}, or {{service_line.cpt_code}}. Placeholders will be resolved dynamically at runtime.')),
                ('query_params', models.JSONField(blank=True, help_text="Optional query parameters specific to this profile. These override or extend the endpoint-level parameters. Example: {'useFhirVersion': 'R4'}", null=True)),
                ('version', models.CharField(blank=True, help_text="Optional version (e.g., 'v1.0', '2025-Q1').", max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this profile is active.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last update timestamp.')),
                ('endpoint', models.ForeignKey(help_text='The endpoint this payload profile maps to.', on_delete=django.db.models.deletion.CASCADE, related_name='payload_profiles', to='superbill.edipayerendpoint')),
            ],
            options={
                'verbose_name': 'EDI Payer Payload',
                'verbose_name_plural': 'EDI Payer Payloads',
                'db_table': 'superbill_edi_payer_payload',
            },
        ),
        migrations.CreateModel(
            name='EDIPayerRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_length', models.PositiveIntegerField(blank=True, help_text='Minimum length for this element. Used for padding.', null=True)),
                ('max_length', models.PositiveIntegerField(blank=True, help_text='Maximum length for this element. Used for truncation/padding.', null=True)),
                ('pad_char', models.CharField(blank=True, help_text='Character used for padding (default space for most, 0 for control numbers).', max_length=1, null=True)),
                ('pad_side', models.CharField(choices=[('left', 'Left'), ('right', 'Right')], default='right', help_text='Which side to pad on if length < max_length.', max_length=5)),
                ('rule_type', models.CharField(choices=[('FIELD', 'Field'), ('CONSTANT', 'Constant'), ('MAPPING', 'Mapping'), ('FUNC', 'Func')], help_text='How to resolve the value for this element.', max_length=50)),
                ('constant_value', models.CharField(blank=True, help_text='Fixed value for CONSTANT rule type.', max_length=200, null=True)),
                ('transformation', models.JSONField(blank=True, help_text='Optional transformations (uppercase, truncate, date format).', null=True)),
                ('condition', models.JSONField(blank=True, help_text="Apply rule only if conditions are met (e.g., {'claim_type': 'professional'}).", null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Execution order if multiple rules exist for the same element.')),
                ('required', models.BooleanField(default=True, help_text='Whether this element must be populated for this payer.')),
                ('data_key', models.ForeignKey(blank=True, help_text='Reference to a DataKey to resolve the value dynamically.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='superbill.edidatakey')),
                ('element', models.ForeignKey(help_text='The EDI element this rule applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='superbill.edielement')),
                ('payer', models.ForeignKey(help_text='The payer this rule applies to.', on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='superbill.edipayer')),
            ],
            options={
                'verbose_name': 'EDI Payer Rule',
                'verbose_name_plural': 'EDI Payer Rules',
                'db_table': 'superbilling_edi_payer_rule',
            },
        ),
        migrations.AddField(
            model_name='ediclaim',
            name='billing_provider_npi',
            field=models.ForeignKey(help_text='The provider or organization submitting the claim (billing NPI).', on_delete=django.db.models.deletion.PROTECT, related_name='billed_claims', to='superbill.ediprovider'),
        ),
        migrations.CreateModel(
            name='EDISegment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Segment ID (e.g., 'NM1', 'REF', 'DTP').", max_length=20)),
                ('position', models.PositiveIntegerField(help_text='Ordering of this segment inside the loop.')),
                ('loop', models.ForeignKey(help_text='The loop this segment belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='segments', to='superbill.ediloop')),
            ],
            options={
                'verbose_name': 'EDI Service Loop',
                'verbose_name_plural': 'EDI Service Loops',
                'db_table': 'superbill_edi_segment',
            },
        ),
        migrations.AddField(
            model_name='edielement',
            name='segment',
            field=models.ForeignKey(help_text='The segment this element belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='elements', to='superbill.edisegment'),
        ),
        migrations.CreateModel(
            name='EDIServiceLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('line_number', models.PositiveIntegerField(help_text='Sequential line number for this service within the claim.')),
                ('emg_service_pointer', models.BooleanField(default=False, help_text='Indicates if this service line was an emergency service.')),
                ('charge_amount', models.DecimalField(decimal_places=2, help_text='Charge amount for this individual service line.', max_digits=10)),
                ('units', models.IntegerField(default=1, help_text='The number of times the procedure or service was performed.         For example, if a lab test was done twice, set units=2.')),
                ('service_date', models.DateField(help_text='Date the specific service was provided.')),
                ('claim', models.ForeignKey(help_text='The claim this service line belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='service_lines', to='superbill.ediclaim')),
                ('diagnosis_pointers', models.ManyToManyField(help_text='The ICD diagnoses from the claim that justify this service line (diagnosis pointers).', related_name='service_lines', to='superbill.ediclaimdiagnosis')),
                ('place_of_service', models.ForeignKey(help_text='Place of Service (POS) code indicating where the service was performed,         e.g., 11=Office, 21=Inpatient Hospital.', on_delete=django.db.models.deletion.PROTECT, to='superbill.billingplaceofservice')),
                ('procedure', models.ForeignKey(help_text='The CPT or HCPCS code representing the medical         procedure or service performed for this service line.', on_delete=django.db.models.deletion.PROTECT, to='superbill.billingprocedurecode')),
                ('rendering_provider', models.ForeignKey(help_text='The provider who actually performed the service (rendering NPI).', on_delete=django.db.models.deletion.PROTECT, related_name='rendered_service_lines', to='superbill.ediprovider')),
            ],
            options={
                'verbose_name': 'EDI Service Line',
                'verbose_name_plural': 'EDI Service Lines',
                'db_table': 'superbill_edi_service_line',
            },
        ),
        migrations.CreateModel(
            name='EDIMedicationLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, help_text='The quantity of medication administered for this service line.', max_digits=10)),
                ('ndc_code', models.ForeignKey(help_text='National Drug Code identifying the specific medication or drug administered.', on_delete=django.db.models.deletion.PROTECT, to='superbill.billingndccode')),
                ('service_line', models.ForeignKey(help_text='The service line this medication is associated with.', on_delete=django.db.models.deletion.CASCADE, related_name='medications', to='superbill.ediserviceline')),
            ],
            options={
                'verbose_name': 'EDI Medication Line',
                'verbose_name_plural': 'EDI Medication Lines',
                'db_table': 'superbill_edi_medication_line',
            },
        ),
        migrations.CreateModel(
            name='EDIServiceModifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modifier_code', models.ForeignKey(help_text='Modifier code that provides additional         context for the service (e.g., LT, RT, 59).', on_delete=django.db.models.deletion.PROTECT, to='superbill.billingmodifier')),
                ('service_line', models.ForeignKey(help_text='The service line this modifier belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='modifiers', to='superbill.ediserviceline')),
            ],
            options={
                'verbose_name': 'EDI Service Modifier',
                'verbose_name_plural': 'EDI Service Modifiers',
                'db_table': 'superbill_edi_service_modifier',
            },
        ),
    ]
